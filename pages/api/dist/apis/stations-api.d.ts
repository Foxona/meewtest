/**
 * some api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateStation } from '../models';
import { Station } from '../models';
import { UpdateStation } from '../models';
/**
 * StationsApi - axios parameter creator
 * @export
 */
export declare const StationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Station
     * @param {CreateStation} body
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStationStationsPost: (body: CreateStation, userJwt?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Station
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStationStationsIdDelete: (id: number, userJwt?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Station By Id
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStationByIdStationsIdGet: (id: number, userJwt?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Stations
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStationsStationsGet: (userJwt?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Station
     * @param {UpdateStation} body
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStationStationsIdPatch: (body: UpdateStation, id: number, userJwt?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * StationsApi - functional programming interface
 * @export
 */
export declare const StationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Station
     * @param {CreateStation} body
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStationStationsPost(body: CreateStation, userJwt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>>;
    /**
     *
     * @summary Delete Station
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStationStationsIdDelete(id: number, userJwt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>>;
    /**
     *
     * @summary Get Station By Id
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStationByIdStationsIdGet(id: number, userJwt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>>;
    /**
     *
     * @summary List Stations
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStationsStationsGet(userJwt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Station>>>;
    /**
     *
     * @summary Update Station
     * @param {UpdateStation} body
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStationStationsIdPatch(body: UpdateStation, id: number, userJwt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>>;
};
/**
 * StationsApi - factory interface
 * @export
 */
export declare const StationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Station
     * @param {CreateStation} body
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStationStationsPost(body: CreateStation, userJwt?: string, options?: any): AxiosPromise<Station>;
    /**
     *
     * @summary Delete Station
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStationStationsIdDelete(id: number, userJwt?: string, options?: any): AxiosPromise<Station>;
    /**
     *
     * @summary Get Station By Id
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStationByIdStationsIdGet(id: number, userJwt?: string, options?: any): AxiosPromise<Station>;
    /**
     *
     * @summary List Stations
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStationsStationsGet(userJwt?: string, options?: any): AxiosPromise<Array<Station>>;
    /**
     *
     * @summary Update Station
     * @param {UpdateStation} body
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStationStationsIdPatch(body: UpdateStation, id: number, userJwt?: string, options?: any): AxiosPromise<Station>;
};
/**
 * StationsApi - object-oriented interface
 * @export
 * @class StationsApi
 * @extends {BaseAPI}
 */
export declare class StationsApi extends BaseAPI {
    /**
     *
     * @summary Create Station
     * @param {CreateStation} body
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    createStationStationsPost(body: CreateStation, userJwt?: string, options?: any): Promise<import("axios").AxiosResponse<Station>>;
    /**
     *
     * @summary Delete Station
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    deleteStationStationsIdDelete(id: number, userJwt?: string, options?: any): Promise<import("axios").AxiosResponse<Station>>;
    /**
     *
     * @summary Get Station By Id
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    getStationByIdStationsIdGet(id: number, userJwt?: string, options?: any): Promise<import("axios").AxiosResponse<Station>>;
    /**
     *
     * @summary List Stations
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    listStationsStationsGet(userJwt?: string, options?: any): Promise<import("axios").AxiosResponse<Station[]>>;
    /**
     *
     * @summary Update Station
     * @param {UpdateStation} body
     * @param {number} id
     * @param {string} [userJwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    updateStationStationsIdPatch(body: UpdateStation, id: number, userJwt?: string, options?: any): Promise<import("axios").AxiosResponse<Station>>;
}
